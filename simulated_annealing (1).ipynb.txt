{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Метод имитации отжига"
      ],
      "metadata": {
        "id": "y5wxbziQGx4c"
      },
      "id": "y5wxbziQGx4c"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Импорт библиотек\n",
        "\n"
      ],
      "metadata": {
        "id": "9r-fEbcwGpnK"
      },
      "id": "9r-fEbcwGpnK"
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import random\n",
        "import math\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "RsE_ypNkGrhj"
      },
      "id": "RsE_ypNkGrhj",
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Целевая функция"
      ],
      "metadata": {
        "id": "lbP_p_lEG6A3"
      },
      "id": "lbP_p_lEG6A3"
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "1607054f",
      "metadata": {
        "id": "1607054f"
      },
      "outputs": [],
      "source": [
        "def object_function(subsets, list_sum):\n",
        "    subsets_sum = []\n",
        "\n",
        "    for subset in subsets:\n",
        "        subset_value = (sum(subset) - list_sum / len(subsets)) ** 2\n",
        "        subsets_sum.append(subset_value)\n",
        "\n",
        "    return sum(subsets_sum)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Случайное начальное решение"
      ],
      "metadata": {
        "id": "rX-6YtN3G-O1"
      },
      "id": "rX-6YtN3G-O1"
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "55d6130f",
      "metadata": {
        "id": "55d6130f"
      },
      "outputs": [],
      "source": [
        "def get_random_solution(list, k):\n",
        "    return np.array_split(list, k)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Генерация нового случайного решения"
      ],
      "metadata": {
        "id": "dqqNfoydHBSx"
      },
      "id": "dqqNfoydHBSx"
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "490ffd3c",
      "metadata": {
        "id": "490ffd3c"
      },
      "outputs": [],
      "source": [
        "def generate_new_solution(solution):\n",
        "    while True:\n",
        "        i = random.randint(0, k - 1) # откуда переносим\n",
        "        j = random.randint(0, k - 1) # куда переносим\n",
        "        if len(solution[i]) > 1 and i != j:\n",
        "            break\n",
        "\n",
        "    l = random.randint(0, len(solution[i]) - 1) # какой элемент переносим\n",
        "\n",
        "    element = solution[i][l]\n",
        "    solution[i] = np.delete(solution[i], l)\n",
        "    solution[j] = np.append(solution[j], element)\n",
        "\n",
        "    return solution"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Функция температуры"
      ],
      "metadata": {
        "id": "4Z0DJnnHHGPb"
      },
      "id": "4Z0DJnnHHGPb"
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "75762727",
      "metadata": {
        "id": "75762727"
      },
      "outputs": [],
      "source": [
        "def get_t_value(i, t0):\n",
        "    return t0 / math.ln(i + 1)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Принятие решение с определенной вероятностью"
      ],
      "metadata": {
        "id": "qtv8pxhZHN04"
      },
      "id": "qtv8pxhZHN04"
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "d5539cd2",
      "metadata": {
        "id": "d5539cd2"
      },
      "outputs": [],
      "source": [
        "def decision_with_probability(delta_e, i, t0):\n",
        "    if delta_e <= 0:\n",
        "        return True\n",
        "\n",
        "    t_i = get_t_value(i, t0)\n",
        "    probability = math.exp(-delta_e / t_i)\n",
        "    rand_value = random.random()\n",
        "\n",
        "    if 0 <= probability and probability <= rand_value:\n",
        "        return True\n",
        "\n",
        "    return False"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Метод имитации отжига"
      ],
      "metadata": {
        "id": "MM58_AmJHR_Y"
      },
      "id": "MM58_AmJHR_Y"
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "74355e36",
      "metadata": {
        "id": "74355e36"
      },
      "outputs": [],
      "source": [
        "def simulated_annealing(list, k, iterations = 100, t0 = 200):\n",
        "    list_sum = sum(list)\n",
        "    solution = get_random_solution(list, k)\n",
        "    best_solution = solution.copy()\n",
        "    of_best_solution = object_function(best_solution, list_sum)\n",
        "    i = 1\n",
        "    of_values = []\n",
        "\n",
        "    while i <= iterations:\n",
        "        new_solution = generate_new_solution(solution)\n",
        "        of_new_solution = object_function(new_solution, list_sum)\n",
        "        of_solution = object_function(solution, list_sum)\n",
        "        if of_new_solution < of_best_solution:\n",
        "            best_solution = new_solution.copy()\n",
        "            of_best_solution = of_new_solution\n",
        "\n",
        "        delta_e = of_new_solution - of_solution\n",
        "        if decision_with_probability(delta_e, i, t0):\n",
        "            solution = new_solution.copy()\n",
        "\n",
        "        of_values.append(of_solution)\n",
        "\n",
        "        i += 1\n",
        "\n",
        "    return best_solution, of_values"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Исходные данные"
      ],
      "metadata": {
        "id": "U1WaeH89HWZ6"
      },
      "id": "U1WaeH89HWZ6"
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "c5b7a970",
      "metadata": {
        "id": "c5b7a970"
      },
      "outputs": [],
      "source": [
        "list = np.random.randint(1, 100, 50)\n",
        "k = 5"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "236bc7bb",
      "metadata": {
        "id": "236bc7bb"
      },
      "outputs": [],
      "source": [
        "solution, of_values = simulated_annealing(list, k, 1000)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Решение"
      ],
      "metadata": {
        "id": "2TdJ4_dgHc0P"
      },
      "id": "2TdJ4_dgHc0P"
    },
    {
      "cell_type": "code",
      "source": [
        "solution"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oSv3Ty-YHaYG",
        "outputId": "c5e7b8e1-aede-4176-e82c-085181a03eab"
      },
      "id": "oSv3Ty-YHaYG",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[array([82, 43, 66, 82, 13, 85, 19, 76, 24,  2, 17]),\n",
              " array([59, 80, 24, 38, 39, 59,  4, 23, 46, 22]),\n",
              " array([95, 70, 39, 94, 96, 57,  7, 78, 81]),\n",
              " array([92, 61, 85, 68, 52, 43, 71, 88,  6, 74]),\n",
              " array([93, 25, 34, 65,  2, 24, 48, 41, 98, 76])]"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## График значений целевой функции на каждой итерации"
      ],
      "metadata": {
        "id": "Zel4CzFuHexY"
      },
      "id": "Zel4CzFuHexY"
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "d97d25ee",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "d97d25ee",
        "outputId": "d026cc8c-7bac-40be-f98d-a0e2aea5d6f0"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.plot(of_values)\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}